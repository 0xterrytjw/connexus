import type { NextApiRequest, NextApiResponse } from "next";
import { handleError, ErrorResponse } from "../../../lib/prisma-util";
import { PrismaClient, Event } from "@prisma/client";
import { Network, Alchemy, Wallet } from "alchemy-sdk";
import { ethers, SigningKey } from "ethers";
import fs from "fs";
import { Networkish } from "ethers/types/providers";
import path from "path";
import EventJSON from "./Event.json";

const prisma = new PrismaClient();

/**
 * @swagger
 * /api/events:
 *   get:
 *     description: Returns a list of Event objects
 *     responses:
 *       200:
 *         description: A list of Event objects
 *         content:
 *          application/json:
 *            schema:
 *              $ref: "#/components/schemas/Event"
 *   post:
 *     description: Create a Event object
 *     parameters:
 *       - in: object
 *         name: Event
 *         required: true
 *         description: Event object to create
 *         application/json:
 *          schema:
 *            $ref: "#/components/schemas/Event"
 *     responses:
 *       200:
 *         description: The created Event object
 *         content:
 *           application/json:
 *             schema:
 *               $ref: "#/components/schemas/Event"
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<Event[] | ErrorResponse>
) {
  const { method } = req;

  switch (req.method) {
    case "GET":
      await handleGET();
      break;
    case "POST":
      const event = JSON.parse(JSON.stringify(req.body)) as Event;
      await handlePOST(event);
      break;
    default:
      res.setHeader("Allow", ["GET", "POST"]);
      res.status(405).end(`Method ${method} Not Allowed`);
  }

  async function handleGET() {
    // Optional Config object, but defaults to demo api-key and eth-mainnet.
    // const settings = {
    //   apiKey: "6ycDX83NnrwWaaZZDB8ic_xPMc88ClwD", // Replace with your Alchemy API Key.
    //   network: Network.MATIC_MUMBAI, // Replace with your network.
    // };
    // const alchemy = new Alchemy(settings);
    // const latestBlock = await alchemy.core.getBlockNumber();
    // console.log("The latest block number is", latestBlock);

    const network: Networkish = {
      name: "maticmum",
      chainId: 80001,
    };

    // const provider = new ethers.AlchemyProvider(
    //   network,
    //   "6ycDX83NnrwWaaZZDB8ic_xPMc88ClwD"
    // );

    const privateKey =
      "9d2b651e7ff0014cd3e8b8c6df9ccdc64b55ffe9f9b8b5a967896beca4e0e191";

    // Read the contract artifact, which was generated by Remix
    const metadata = EventJSON;
    console.log(metadata);

    const options = {
      gasLimit: 100000,
      gasPrice: ethers.parseUnits("1", "ether"),
    };

    const provider = ethers.getDefaultProvider(
      "https://polygon-mumbai.g.alchemy.com/v2/6ycDX83NnrwWaaZZDB8ic_xPMc88ClwD"
    );

    const wallet = new ethers.Wallet(privateKey, provider);

    // Deploy the contract
    const factory = new ethers.ContractFactory(metadata.abi, metadata.bytecode);
    const contract = await factory.deploy(
      ["a", "b"],
      [1, 1],
      [1, 1],
      "nice",
      "02021200",
      "capitol",
      1,
      1,
      "yo",
      options
    );
    console.log(`Deployment successful! Contract Address: ${contract}`);

    // try {
    //   const events = await prisma.event.findMany({
    //     include: {
    //       tickets: true,
    //     },
    //   });
    //   res.status(200).json(events);
    // } catch (error) {
    //   const errorResponse = handleError(error);
    //   res.status(400).json(errorResponse);
    // }
  }

  async function handlePOST(event: Event) {
    try {
      const response = await prisma.event.create({
        data: { ...event, eventId: undefined },
      });
      res.status(200).json([response]);
    } catch (error) {
      const errorResponse = handleError(error);
      res.status(400).json(errorResponse);
    }
  }
}
