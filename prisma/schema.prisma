// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-arm64-openssl-1.1.x", "darwin-arm64", "windows", "debian-openssl-1.1.x"]
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./generated/json-schema"
}

model User {
  userId              Int           @id @default(autoincrement())
  walletAddress       String        @unique
  phoneNumber         String?
  profilePic          String?
  bannerPic           String?
  displayName         String?
  username            String        @unique
  email               String        @unique
  bio                 String?
  notificationBySMS   Boolean       @default(true)
  notificationByEmail Boolean       @default(true)
  createdCollections  Collection[]  @relation(name: "createdCollections")
  createdCommunities  Community[]   @relation(name: "createdCommunities")
  joinedCommunities   Community[]   @relation(name: "joinedCommunities")
  joinedChannels      Channel[]
  posts               Post[]        @relation(name: "creator")
  likedPosts          Post[]        @relation(name: "likedPosts")
  comments            Comment[]     @relation(name: "commenter")
  likedComments       Comment[]     @relation(name: "likedComments")
  tickets             Ticket[]
  merchandise         Merchandise[]
  likedEvents         Event[]       @relation("eventLikes")
  userTicket          UserTicket[]
  events              Event[]       @relation("createdEvents")
  walletBalance       Float         @default(0)
  questions           Question[]
  transactions        Transaction[]
  bankAccount         BankAccount?
}

model Post {
  postId    Int       @id @default(autoincrement())
  content   String
  date      DateTime  @default(now())
  media     String[]
  isPinned  Boolean   @default(false)
  creator   User      @relation(name: "creator", fields: [creatorId], references: [userId])
  creatorId Int
  channel   Channel   @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  channelId Int
  likes     User[]    @relation(name: "likedPosts")
  comments  Comment[]
}

model Community {
  communityId Int            @id @default(autoincrement())
  name        String
  description String
  profilePic  String?
  bannerPic   String?
  tags        CategoryType[]
  maxMembers  Int            @default(100)
  creator     User           @relation(name: "createdCommunities", fields: [userId], references: [userId])
  userId      Int
  members     User[]         @relation(name: "joinedCommunities")
  channels    Channel[]
  analyticsTimestamps CommunityAnalyticsTimestamp[]
  clicks Int @default(0)
}

model Channel {
  channelId    Int         @id @default(autoincrement())
  name         String
  channelType  ChannelType @default(PREMIUM)
  members      User[]
  community    Community   @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId  Int
  posts        Post[]
  collection   Collection? @relation(fields: [collectionId], references: [collectionId])
  collectionId Int?        @unique
  questions    Question[]
  analyticsTimestamps ChannelAnalyticsTimestamp[]

  @@unique([communityId, name])
}

model Comment {
  commentId       Int       @id @default(autoincrement())
  content         String
  date            DateTime  @default(now())
  post            Post      @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId          Int
  commenter       User      @relation(name: "commenter", fields: [userId], references: [userId])
  userId          Int
  likes           User[]    @relation(name: "likedComments")
  originalComment Comment?  @relation(name: "replies", fields: [commentId], references: [commentId])
  replies         Comment[] @relation(name: "replies")
}

model Event {
  eventId          Int            @id @default(autoincrement())
  eventName        String
  category         CategoryType[]
  address          Address        @relation(fields: [addressId], references: [addressId])
  addressId        Int
  startDate        DateTime       @default(now())
  endDate          DateTime       @default(now())
  summary          String?
  description      String?
  visibilityType   VisibilityType
  privacyType      PrivacyType
  eventPic         String?
  bannerPic        String?
  maxAttendee      Int            @default(0)
  publishType      PublishType
  publishStartDate DateTime       @default(now())
  tickets          Ticket[]
  ticketURIs       String[]
  scAddress        String
  userLikes        User[]         @relation("eventLikes")
  creator          User           @relation(fields: [creatorId], references: [userId], name: "createdEvents")
  creatorId        Int
  analyticsTimestamps EventAnalyticsTimestamp[]
  clicks Int @default(0)
  promotion        Promotion[]
}

enum PublishType {
  NOW
  LATER
}

model Address {
  addressId    Int     @id @default(autoincrement())
  locationName String
  address1     String
  address2     String?
  postalCode   String
  Event        Event[]
  lat          Float
  lng          Float
}

model Ticket {
  ticketId            Int          @id @default(autoincrement())
  name                String
  totalTicketSupply   Int          @default(0)
  currentTicketSupply Int          @default(0)
  price               Float        @default(0)
  ticketType          TicketType   @default(ON_SALE)
  startDate           DateTime     @default(now())
  endDate             DateTime     @default(now())
  description         String?
  event               Event        @relation(references: [eventId], fields: [eventId], onDelete: Cascade)
  eventId             Int
  users               User[]
  userTicket          UserTicket[]
  stripePriceId       String? //To be removed
}

model UserTicket {
  userTicketId Int     @id @default(autoincrement())
  userId       Int
  ticketId     Int
  checkIn      Boolean @default(false)

  user   User   @relation(fields: [userId], references: [userId])
  ticket Ticket @relation(fields: [ticketId], references: [ticketId])

  @@unique([userId, ticketId])
}

enum TicketType {
  PAUSED
  ON_SALE
}

model Promotion {
  promotionId       Int     @id @default(autoincrement())
  name              String
  promotionValue    Float   @default(0)
  event             Event   @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  eventId           Int
  isEnabled         Boolean @default(false)
  stripePromotionId String? //To be removed
}

enum CategoryType {
  AUTOCAR
  BOAT
  AIR
  PROFESSIONAL
  CULTURE
  FASHION
  BEAUTY
  POLITICS
  HOBBIES
  ARTS
  RELIGION
  SCHOOL
  SCIENCE
  TECHNOLOGY
  HOLIDAY
  FITNESS
  NFT
  TRAVEL
  HEALTH
  PHOTOGRAPHY
  LIFESTYLE
  ENTERTAINMENT
  ANIMALS
  EDUCATION
  FOOD
}

enum VisibilityType {
  DRAFT
  PUBLISHED
}

enum PrivacyType {
  PUBLIC
  PRIVATE
}

enum ChannelType {
  REGULAR
  PREMIUM
  PRIVATE
}

model Collection {
  collectionId    Int             @id @default(autoincrement())
  collectionName  String          @unique
  description     String
  currency        Currency        @default(USD)
  collectionState CollectionState @default(ON_SALE)
  merchandise     Merchandise[]
  fixedPrice      Float           @default(0)
  scAddress       String
  merchURIs       String[]
  creator         User            @relation(name: "createdCollections", fields: [creatorId], references: [userId])
  creatorId       Int
  analyticsTimestamps CollectionAnalyticsTimestamp[]
  premiumChannel  Channel?
  clicks Int @default(0)
}

enum CollectionState {
  ON_SALE
  SOLD
  PAUSED
}

enum Currency {
  USD
  ETH
  BTC
  USDC
}

model Merchandise {
  merchId          Int        @id @default(autoincrement())
  name             String
  image            String
  stripePriceId    String? //Optional To be removed
  price            Float      @default(0)
  totalMerchSupply Int        @default(0)
  currMerchSupply  Int        @default(0)
  collection       Collection @relation(fields: [collectionId], references: [collectionId], onDelete: Cascade)
  collectionId     Int
  users            User[]
}

model CommunityAnalyticsTimestamp {
  id Int @id @default(autoincrement())
  members Int
  premiumMembers Int
  clicks Int
  date DateTime @default(now())
  community Community @relation(fields: [communityId], references: [communityId])
  communityId Int
}

model ChannelAnalyticsTimestamp {
  id Int @id @default(autoincrement())
  likes Int
  comments Int
  engagement Float
  date DateTime @default(now())
  channel Channel @relation(fields: [channelId], references: [channelId])
  channelId Int
}

model EventAnalyticsTimestamp {
  id Int @id @default(autoincrement())
  ticketsSold Int
  revenue Int
  clicks Int
  likes Int 
  date DateTime @default(now())
  event Event @relation(fields: [eventId], references: [eventId])
  eventId Int
}

model CollectionAnalyticsTimestamp {
  id Int @id @default(autoincrement())
  merchSold Int
  revenue Int
  clicks Int
  date DateTime @default(now())
  collection Collection @relation(fields: [collectionId], references: [collectionId])
  collectionId Int
}

model Question {
  questionId Int      @id @default(autoincrement())
  question   String
  answer     String   @default("")
  date       DateTime @default(now())
  user       User     @relation(fields: [userId], references: [userId])
  userId     Int
  channel    Channel  @relation(fields: [channelId], references: [channelId])
  channelId  Int
}

model Transaction {
  transactionId     Int                   @id @default(autoincrement())
  timestamp         DateTime              @default(now())
  amount            Float                 @default(0)
  user              User                  @relation(fields: [userId], references: [userId])
  userId            Int
  transactionStatus TransactionStatusType @default(PENDING)
}

model BankAccount {
  bankAccountId Int    @id @default(autoincrement())
  bankName      String
  accountName   String
  accountNumber String
  routingNumber String
  user          User   @relation(fields: [userId], references: [userId])
  userId        Int    @unique
}

enum TransactionStatusType {
  PENDING
  COMPLETED
  REJECTED
}
