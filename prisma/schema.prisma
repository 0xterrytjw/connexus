// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-arm64-openssl-1.1.x", "darwin-arm64", "windows", "debian-openssl-1.1.x"]
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
  output   = "./generated/json-schema"
}

model User {
  userId              Int           @id @default(autoincrement())
  walletAddress       String        @unique
  phoneNumber         String?
  profilePic          String?
  bannerPic           String?
  displayName         String?
  username            String        @unique
  email               String        @unique
  bio                 String?
  notificationBySMS   Boolean       @default(true)
  notificationByEmail Boolean       @default(true)
  createdCollections  Collection[]  @relation(name: "createdCollections")
  createdCommunities  Community[]   @relation(name: "createdCommunities")
  joinedCommunities   Community[]   @relation(name: "joinedCommunities")
  joinedChannels      Channel[]
  posts               Post[]        @relation(name: "creator")
  likedPosts          Post[]        @relation(name: "likedPosts")
  comments            Comment[]     @relation(name: "commenter")
  likedComments       Comment[]     @relation(name: "likedComments")
  tickets             Ticket[]
  merchandise         Merchandise[]
}

model Post {
  postId    Int       @id @default(autoincrement())
  title     String
  content   String
  date      DateTime  @default(now())
  media     String[]
  isPinned  Boolean   @default(false)
  creator   User      @relation(name: "creator", fields: [creatorId], references: [userId])
  creatorId Int
  channel   Channel   @relation(fields: [channelId], references: [channelId], onDelete: Cascade)
  channelId Int
  likes     User[]    @relation(name: "likedPosts")
  comments  Comment[]
}

model Community {
  communityId Int            @id @default(autoincrement())
  name        String
  description String
  profilePic  String?
  bannerPic   String?
  tags        CategoryType[]
  maxMembers  Int            @default(100)
  creator     User           @relation(name: "createdCommunities", fields: [userId], references: [userId])
  userId      Int
  members     User[]         @relation(name: "joinedCommunities")
  channels    Channel[]
}

model Channel {
  channelId   Int         @id @default(autoincrement())
  name        String
  channelType ChannelType @default(PREMIUM)
  members     User[]
  community   Community   @relation(fields: [communityId], references: [communityId], onDelete: Cascade)
  communityId Int
  posts       Post[]

  @@unique([communityId, name])
}

model Comment {
  commentId       Int       @id @default(autoincrement())
  content         String
  date            DateTime  @default(now())
  post            Post      @relation(fields: [postId], references: [postId], onDelete: Cascade)
  postId          Int
  commenter       User      @relation(name: "commenter", fields: [userId], references: [userId])
  userId          Int
  likes           User[]    @relation(name: "likedComments")
  originalComment Comment?  @relation(name: "replies", fields: [commentId], references: [commentId])
  replies         Comment[] @relation(name: "replies")
}

model Event {
  eventId            Int            @id @default(autoincrement())
  eventName          String
  category           CategoryType[]
  address            Address        @relation(fields: [addressId], references: [addressId])
  addressId          Int
  startDate          DateTime       @default(now())
  endDate            DateTime       @default(now())
  summary            String?
  description        String?
  visibilityType     VisibilityType
  privacyType        PrivacyType
  eventPic           String?
  bannerPic          String?
  maxAttendee        Int            @default(0)
  publishType        PublishType
  publishStartDate   DateTime       @default(now())
  tickets            Ticket[]
  ticketURIs         String[]
  scAddress          String
}

enum PublishType {
  NOW
  LATER
}

model Address {
  addressId    Int     @id @default(autoincrement())
  locationName String
  address1     String
  address2     String?
  postalCode   String
  Event        Event[]
  lat          Float
  lng          Float
}

model Ticket {
  ticketId            Int         @id @default(autoincrement())
  name                String
  totalTicketSupply   Int         @default(0)
  currentTicketSupply Int         @default(0)
  price               Float       @default(0)
  ticketType          TicketType  @default(ON_SALE)
  startDate           DateTime    @default(now())
  endDate             DateTime    @default(now())
  description         String?
  event               Event       @relation(references: [eventId], fields: [eventId], onDelete: Cascade)
  eventId             Int
  promotion           Promotion[]
  users               User[]
}

enum TicketType{
  PAUSED
  ON_SALE
}

model Promotion {
  promotionId    Int           @id @default(autoincrement())
  name           String
  promotionType  PromotionType
  promotionValue Float         @default(0)
  quantity       Int           @default(0)
  startDate      DateTime      @default(now())
  endDate        DateTime      @default(now())
  ticket         Ticket        @relation(references: [ticketId], fields: [ticketId], onDelete: Cascade)
  ticketId       Int
}

enum CategoryType {
  AUTOCAR
BOAT
AIR
PROFESSIONAL
CULTURE
FASHION
BEAUTY
POLITICS
HOBBIES
ARTS
RELIGION
SCHOOL
SCIENCE
TECHNOLOGY
HOLIDAY
FITNESS
NFT
TRAVEL
HEALTH
PHOTOGRAPHY
LIFESTYLE
ENTERTAINMENT
ANIMALS
EDUCATION
FOOD
}

enum VisibilityType {
  DRAFT
  PUBLISHED
}

enum PrivacyType {
  PUBLIC
  PRIVATE
}

enum ChannelType {
  REGULAR
  PREMIUM
  PRIVATE
}

enum PromotionType {
  LIMITED
  UNLIMITED
}

model Collection {
  collectionId    Int             @id @default(autoincrement())
  collectionName  String          @unique
  description     String?
  currency        Currency        @default(USD)
  collectionState CollectionState @default(CREATED)
  merchandise     Merchandise[]
  fixedPrice      Float           @default(0)
  scAddress       String
  merchURIs       String[]
  creator         User            @relation(name: "createdCollections", fields: [creatorId], references: [userId])
  creatorId       Int
}

enum CollectionState {
  CREATED
  ON_SALE
  SOLD
  PAUSED
}

enum Currency {
  USD
  ETH
  BTC
  USDC
}

model Merchandise {
  merchId          Int        @id @default(autoincrement())
  name             String
  image            String?
  price            Float      @default(0)
  totalMerchSupply Int        @default(0)
  currMerchSupply  Int        @default(0)
  collection       Collection @relation(fields: [collectionId], references: [collectionId], onDelete: Cascade)
  collectionId     Int
  users            User[]
}
