// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId    Int    @id @default(autoincrement())
  email String @unique
  name  String

  createdCommunities Community[] @relation(name: "createdCommunities")
  joinedCommunities Community[] @relation(name: "joinedCommunities")
  joinedChannels UsersOnChannels[]
  posts Post[]
  // comments Comment[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String
  published Boolean
  user      User    @relation(fields: [userId], references: [userId])
  userId    Int
}

model Community {
  communityId Int @id @default(autoincrement())
  name String 
  description String?
  profilePic String?
  tags String[]
  maxMembers Int
  privacyType PrivacyType @default(PUBLIC)
  communityType CommunityType 
  

  creator User @relation(name: "createdCommunities", fields: [creatorId], references: [userId])
  creatorId Int @unique

  members User[] @relation(name: "joinedCommunities")

  channels Channel[] 
}

model Channel {
  name String
  description String? 
  channelType ChannelType @default(REGULAR)

  members UsersOnChannels[]

  community Community @relation(fields: [communityId], references: [communityId])
  communityId Int

  @@id([communityId, name])
}

model UsersOnChannels {
  user User @relation(fields: [userId], references: [userId])
  userId Int
  channel Channel @relation(fields: [communityId, name], references: [communityId, name])
  communityId Int
  name String

  @@id([userId, communityId, name])
}

enum PrivacyType {
  PUBLIC
  PRIVATE
}

enum CommunityType {
  NFT
  CRYPTO
}

enum ChannelType {
  REGULAR
  PREMIUM
  PRIVATE
}
