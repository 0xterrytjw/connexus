// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId              Int               @id @default(autoincrement())
  walletAddress       String
  phoneNumber         String
  profilePic          String?
  bannerPic           String?
  displayName         String
  username            String
  email               String
  notificationBySMS   Boolean           @default(true)
  notificationByEmail Boolean           @default(true)
  createdCommunities  Community[]       @relation(name: "createdCommunities")
  joinedCommunities   Community[]       @relation(name: "joinedCommunities")
  joinedChannels      UsersOnChannels[]
  posts               Post[]            @relation(name: "creator")
  likedPosts          Post[]            @relation(name: "likedPosts")
  comments            Comment[]         @relation(name: "commenter")
  likedComments       Comment[]         @relation(name: "likedComments")
}

model Post {
  postId      Int       @id @default(autoincrement())
  title       String
  content     String
  date        DateTime  @default(now())
  media       String[]
  isPinned    Boolean   @default(false)
  creator     User      @relation(name: "creator", fields: [creatorId], references: [userId])
  creatorId   Int
  channel     Channel   @relation(fields: [communityId, name], references: [communityId, name])
  communityId Int
  name        String
  likes       User[]    @relation(name: "likedPosts")
  comments    Comment[]
}

model Community {
  communityId   Int           @id @default(autoincrement())
  name          String
  description   String
  profilePic    String
  tags          String[]
  maxMembers    Int           @default(100)
  communityType CommunityType @default(NFT)
  creator       User          @relation(name: "createdCommunities", fields: [creatorId], references: [userId])
  creatorId     Int
  members       User[]        @relation(name: "joinedCommunities")
  channels      Channel[]
}

model Channel {
  name        String
  description String
  channelType ChannelType       @default(REGULAR)
  members     UsersOnChannels[]
  community   Community         @relation(fields: [communityId], references: [communityId])
  communityId Int
  posts       Post[]

  @@id([communityId, name])
}

model UsersOnChannels {
  user        User    @relation(fields: [userId], references: [userId])
  userId      Int
  channel     Channel @relation(fields: [communityId, name], references: [communityId, name])
  communityId Int
  name        String

  @@id([userId, communityId, name])
}

model Comment {
  commentId       Int       @id @default(autoincrement())
  content         String
  date            DateTime  @default(now())
  post            Post      @relation(fields: [postId], references: [postId])
  postId          Int
  commenter       User      @relation(name: "commenter", fields: [userId], references: [userId])
  userId          Int
  likes           User[]    @relation(name: "likedComments")
  originalComment Comment   @relation(name: "replies", fields: [commentId], references: [commentId])
  replies         Comment[] @relation(name: "replies")
}

enum PrivacyType {
  PUBLIC
  PRIVATE
}

enum CommunityType {
  NFT
  CRYPTO
}

enum ChannelType {
  REGULAR
  PREMIUM
  PRIVATE
}
